name: Deploy Foodgram Project

on:
  push:
    branches:
      - main

jobs:
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies for code quality check
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-isort

      - name: Check code quality
        run: |
          flake8 ./backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 ./backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  backend_tests:
    needs: code_quality
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install backend dependencies
        run: |
          pip install -r ./backend/requirements.txt

      - name: Run backend tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          cd backend/
          python manage.py test

  frontend_tests:
    needs: code_quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install frontend dependencies
        run: |
          cd frontend/
          npm install

      - name: Run frontend tests
        run: |
          cd frontend/
          npm test

  build_and_push:
    needs: [backend_tests, frontend_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest ./backend/
          docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest ./frontend/
          docker build -t ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest ./nginx/
          docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"

      - name: Executing remote ssh commands to deploy and populate the database
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            sudo docker-compose -f docker-compose.production.yml pull
            sudo docker-compose -f docker-compose.production.yml down
            sudo docker-compose -f docker-compose.production.yml up -d
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec -T backend cp -r /app/collected_static/. /backend_static/static/
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py loaddata /app/data/ingredients.json